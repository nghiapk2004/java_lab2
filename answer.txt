Câu 1 : If you create a constructor method to build a DVD by title then create a constructor method to build a DVD by category. Does JAVA allow you to do this?
Câu trên hoàn toàn đúng, Java cho phép tạo nhiều constructor trong cùng một lớp miễn là mỗi constructor có danh sách tham số khác nhau, điều này được gọi là nạp chồng constructor. Vì vậy, chúng ta có thể tạo một constructor để xây dựng DigitalVideoDisc (DVD) theo tiêu đề và một constructor khác để xây dựng nó theo thể loại.
Câu 2 : Why getter and setter methods are evil?
Getter và setter có thể bị coi là “xấu” trong lập trình hướng đối tượng vì các lý do sau:
1.Vi phạm Tính Đóng Gói:
-Làm Lộ Trạng Thái Nội Bộ: Getter và setter thường làm lộ các trường dữ liệu nội bộ của một đối tượng, cho phép các lớp bên ngoài có thể thay đổi trực tiếp chúng. Điều này vi phạm tính đóng gói, vì các lớp khác có thể truy cập hoặc thay đổi các trạng thái nội tại của đối tượng thay vì tương tác qua các hành vi có ý nghĩa.
-Phá Vỡ Tính Trừu Tượng: Các đối tượng nên biểu diễn hành vi, không chỉ là các tập hợp dữ liệu. Việc sử dụng getter và setter có thể biến một đối tượng thành "kho chứa dữ liệu", khiến các thực thể bên ngoài kiểm soát hành vi của nó, từ đó làm suy yếu tính đóng gói.
2.Tạo Mã Theo Phong Cách Thủ Tục trong Mã Hướng Đối Tượng:
-Getter và setter có xu hướng dẫn đến mã theo phong cách lập trình thủ tục, trong khi mã hướng đối tượng nên thể hiện rõ ràng sự kết hợp giữa dữ liệu và hành vi trong cùng một đối tượng. Điều này có thể làm mã đi ngược lại nguyên tắc hướng đối tượng.
3.Vi Phạm Nguyên Tắc Demeter:
-Getter thường dẫn đến chuỗi gọi phương thức, chẳng hạn như object.getA().getB().getC(), tạo ra sự phụ thuộc chặt chẽ giữa các lớp và vi phạm Nguyên Tắc Demeter, vốn khuyến khích giảm thiểu việc biết quá nhiều về các đối tượng khác. Điều này làm mã trở nên khó bảo trì và cứng nhắc.
